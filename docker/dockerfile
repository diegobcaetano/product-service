# # Estágio 1: Construir o executável.
# FROM golang:1.22-alpine AS builder

# # Instala o Git, necessário para baixar as dependências do Go.
# # Aqui, combinamos a atualização e a instalação em um único comando RUN para simplificar e evitar camadas desnecessárias.
# RUN apk add git

# # Definir o diretório de trabalho atual dentro do container.
# WORKDIR /app

# # Copiar os arquivos 'go.mod' e se existir 'go.sum' e fazer download das dependências.
# COPY go.* ./
# RUN go mod download

# # Copiar o resto dos arquivos do código fonte.
# COPY . .

# # Instalar o Air para hot reload.
# RUN go install github.com/cosmtrek/air@latest

# # Estágio 2: Configurar o ambiente de execução com hot reload.
# FROM golang:1.22-alpine

# WORKDIR /app

# # Copiar o binário do Air e os arquivos necessários do estágio de construção.
# COPY --from=builder /go/bin/air /usr/local/bin/air
# COPY --from=builder /app /app

# # Iniciar o Air para hot reload.
# CMD ["air"]

FROM golang:1.22-alpine AS builder

WORKDIR /app

COPY go.mod go.sum ./
RUN go mod download

COPY . .

RUN apk add git
RUN go install github.com/go-delve/delve/cmd/dlv@latest
RUN go install github.com/cosmtrek/air@latest

EXPOSE 8080
EXPOSE 2345

CMD ["sh", "-c", "dlv debug --headless --listen=:2345 --log --api-version=2 --accept-multiclient exec ./tmp/main & air -c .air-http.toml"]







